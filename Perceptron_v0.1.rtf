{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil Consolas;}{\f1\fnil\fcharset238 Consolas;}{\f2\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;\red43\green145\blue175;\red0\green128\blue0;\red128\green0\blue0;\red163\green21\blue21;}
{\*\generator Riched20 10.0.15063}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\cf1\highlight2\f0\fs19\lang21 using\cf3  System;\par
\cf1 using\cf3  System.Collections.Generic;\par
\cf1 using\cf3  System.Linq;\par
\cf1 using\cf3  System.Text;\par
\cf1 using\cf3  System.Threading.Tasks;\par
\par
\cf1 namespace\cf3  Perceptron\par
\{\par
    \cf1 class\cf3  \cf4 Program\cf3\par
    \{\par
\par
\par
        \cf1 class\cf3  \cf4 Input\cf3\par
        \{\par
            \cf1 public\cf3  \cf1 double\cf3  x0;\par
            \cf1 public\cf3  \cf1 double\cf3  x1;\par
            \cf1 public\cf3  \cf1 double\cf3  y;\par
            \cf1 public\cf3  Input(\cf1 double\cf3  x0, \cf1 double\cf3  x1, \cf1 double\cf3  y)\par
            \{\par
                \cf1 this\cf3 .x0 = x0;\par
                \cf1 this\cf3 .x1 = x1;\par
                \cf1 this\cf3 .y = y;\par
            \}\par
        \}\par
\par
        \par
\par
\par
        \cf1 class\cf3  \cf4 Perceptron\cf3\par
        \{                           \cf5 //BEZ BIASU\cf3\par
            \cf1 public\cf3  \cf4 List\cf3 <\cf1 double\cf3 > W;\par
            \cf1 public\cf3  \cf1 double\cf3  Bias;\par
            \cf1 public\cf3  \cf4 List\cf3 <\cf4 Input\cf3 > data;\par
            \cf1 public\cf3  \cf1 double\cf3  N;\par
            \cf1 int\cf3  licznikEpok;\par
            \cf1 string\cf3 [] output;\par
            \cf1 int\cf3  accuratness;\par
\par
\par
            \cf1 public\cf3  \cf1 void\cf3  Run()\par
            \{\par
                \cf4 List\cf3 <\cf4 Input\cf3 > inputLearn = \cf1 new\cf3  \cf4 List\cf3 <\cf4 Input\cf3 >();\par
                \cf5 //inputLearn.Add(new Input(0, 0, 0));\cf3\par
                inputLearn.Add(\cf1 new\cf3  \cf4 Input\cf3 (1, 0, 0));\par
                inputLearn.Add(\cf1 new\cf3  \cf4 Input\cf3 (0, 1, 0));\par
                inputLearn.Add(\cf1 new\cf3  \cf4 Input\cf3 (1, 1, 1));\par
                \cf4 List\cf3 <\cf4 Input\cf3 > inputCheck = \cf1 new\cf3  \cf4 List\cf3 <\cf4 Input\cf3 >();\par
                inputCheck.Add(\cf1 new\cf3  \cf4 Input\cf3 (0, 0, 0));\par
                inputCheck.Add(\cf1 new\cf3  \cf4 Input\cf3 (1, 0, 0));\par
                inputCheck.Add(\cf1 new\cf3  \cf4 Input\cf3 (0, 1, 0));\par
                inputCheck.Add(\cf1 new\cf3  \cf4 Input\cf3 (1, 1, 1));\par
\par
                \cf1 for\cf3  (\cf1 int\cf3  i = 0; i < 1000; i++)\par
                \{\par
                    licznikEpok++;\par
                    LoadInput(inputLearn);\par
                    Learn();\par
                    LoadInput(inputCheck);\par
                    Evaluate();\par
                \}\par
                System.IO.\cf4 File\cf3 .WriteAllLines(\cf6 @"OUTPUT.txt"\cf3 , output);\par
            \}\par
\par
            \cf1 private\cf3  \cf1 double\cf3  activateFunction(\cf1 double\cf3  x)\par
            \{\par
                \cf1 if\cf3  (x < 0)\par
                    \cf1 return\cf3  0;\par
                \cf1 return\cf3  1;\par
            \}\par
\par
            \cf1 public\cf3  \cf1 void\cf3  LoadInput(\cf4 List\cf3 <\cf4 Input\cf3 > input)\par
            \{\par
                data = input;\par
            \}\par
\par
            \par
\par
            \cf1 public\cf3  \cf1 void\cf3  Learn()\par
            \{\par
                \cf1 double\cf3  sum;\par
                \cf1 foreach\cf3  (\cf4 Input\cf3  element \cf1 in\cf3  data)\par
                \{\par
                    sum = 0;\par
                    sum = element.x0 * W[0] + element.x1 * W[1] + Bias;\par
                    \cf1 double\cf3  result = activateFunction(sum);\par
                    \cf5 /////////// PLUS BIAS EWENTUALNIE (waga biasu mo\f1\'bfe si\'ea zmienia\'e6)\cf3\par
                    \cf1 if\cf3  (element.y == result)\par
                    \{\par
                        \cf5 //neuron dzia\'b3a poprawnie\cf3\par
                    \}\par
                    \cf1 else\cf3\par
                    \{\par
                        \cf5 //trzeba poprawi\'e6 wagi\cf3\par
                        W[0] += N * (element.y - result) * element.x0;\par
                        W[1] += N * (element.y - result) * element.x1;\par
                        Bias += N * (1 - result) * 1;\par
                        \cf4 Console\cf3 .WriteLine(\cf7 "W0 = "\cf3 +W[0]);\par
                        \cf4 Console\cf3 .WriteLine(\cf7 "W1 = "\cf3  + W[1]);\par
                        \cf4 Console\cf3 .WriteLine(\cf7 "B = "\cf3  + Bias);\par
                    \}\par
\par
                \}\par
            \}\par
\par
            \cf1 public\cf3  \cf1 void\cf3  Evaluate()\par
            \{\par
                accuratness = 0;\par
                \cf1 double\cf3  sum;\par
                \cf1 foreach\cf3  (\cf4 Input\cf3  element \cf1 in\cf3  data)\par
                \{\par
                    sum = 0;\par
                    sum = element.x0 * W[0] + element.x1 * W[1] + Bias;\par
                    \cf1 double\cf3  result = activateFunction(sum);\par
                    \cf1 if\cf3  (element.y == result)\par
                    \{\par
                        \cf5 //neuron dzia\'b3a poprawnie\cf3\par
                        \cf4 Console\cf3 .WriteLine(\cf7 "OK"\cf3 );\par
                        accuratness++;\par
                    \}\par
                    \cf1 else\cf3\par
                    \{\par
                        \cf5 //b\'b3\'b9d\cf3\par
                        \cf4 Console\cf3 .WriteLine(\cf7 "NOPE"\cf3 );\par
                    \}\par
\par
                \}\par
                output[licznikEpok - 1] = accuratness.ToString();\par
            \}\par
\par
            \cf1 public\cf3  Perceptron()\par
            \{\par
                W = \cf1 new\cf3  \cf4 List\cf3 <\cf1 double\cf3 >();\par
                \par
                \cf4 Random\cf3  random = \cf1 new\cf3  \cf4 Random\cf3 ();\par
                W.Add(random.NextDouble());\par
                W.Add(random.NextDouble());\par
                Bias = random.NextDouble();\par
                N = 0.001;\par
                licznikEpok = 0;\par
                output = \cf1 new\cf3  \cf1 string\cf3 [1000];\par
                \cf5 //W[0] = random.NextDouble();\cf3\par
                \cf5 //W[1] = random.NextDouble();\cf3\par
            \}\par
\par
        \}\par
\par
\par
\par
        \cf1 static\cf3  \cf1 void\cf3  Main(\cf1 string\cf3 [] args)\par
        \{\par
\par
            \cf5 /*\par
            List<Input> inputLearn = new List<Input>();\par
            //inputLearn.Add(new Input(0, 0, 0));\par
            inputLearn.Add(new Input(1, 0, 0));\par
            inputLearn.Add(new Input(0, 1, 0));\par
            inputLearn.Add(new Input(1, 1, 1));\par
            List<Input> inputCheck = new List<Input>();\par
            inputCheck.Add(new Input(0, 0, 0));\par
            inputCheck.Add(new Input(1, 0, 0));\par
            inputCheck.Add(new Input(0, 1, 0));\par
            inputCheck.Add(new Input(1, 1, 1));\par
            Perceptron p1 = new Perceptron();\par
\par
            Console.WriteLine(p1.N);\par
\par
            for (int i = 0; i < 100; i++)\par
            \{\par
                Console.WriteLine("Epoka: " + i);\par
                p1.LoadInput(inputLearn);\par
                p1.Learn();\par
                p1.LoadInput(inputCheck);\par
                p1.Evaluate();\par
            \}\par
\par
    */\cf3\par
            \cf4 Perceptron\cf3  p1 = \cf1 new\cf3  \cf4 Perceptron\cf3 ();\par
            p1.Run();\par
\par
            \cf5 //System.IO.File.WriteAllLines(@"OUTPUT.txt", lines);\cf3\par
            \cf4 Console\cf3 .ReadLine();\par
        \}\par
    \}\par
\}\par
\cf0\highlight0\f2\fs22\par
}
 